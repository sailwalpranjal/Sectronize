name: CipherLab automation changes

on:
  push:
    branches:
      - main
  schedule:
    - cron: '30 9 * * *'  # Triggers at 9:30 AM daily
    - cron: '0 15 * * *'  # Triggers at 3:00 PM daily
  workflow_dispatch:      # Allows manual triggering

jobs:
  setup_and_balance_activity:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: Configure Git
        run: |
          git config --global user.email "pranjalsailwal09@gmail.com"
          git config --global user.name "sailwalpranjal"

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create .gitignore for Auto Files
        run: |
          echo "Change_autologs.txt" >> .gitignore
          git add .gitignore
          git commit -m "Update .gitignore"
          git push origin main

      - name: Fetch Activity Data
        id: fetch_activity
        run: |
          COMMIT_COUNT=$(gh api -X GET repos/${{ github.repository }}/commits | jq length)
          PR_COUNT=$(gh api -X GET repos/${{ github.repository }}/pulls | jq length)
          ISSUE_COUNT=$(gh api -X GET repos/${{ github.repository }}/issues | jq length)
          REVIEW_COUNT=$(gh api -X GET repos/${{ github.repository }}/pulls/reviews | jq length)
          TOTAL_COUNT=$((COMMIT_COUNT + PR_COUNT + ISSUE_COUNT + REVIEW_COUNT))
          echo "commit_pct=$((COMMIT_COUNT * 100 / TOTAL_COUNT))" >> $GITHUB_ENV
          echo "pr_pct=$((PR_COUNT * 100 / TOTAL_COUNT))" >> $GITHUB_ENV
          echo "issue_pct=$((ISSUE_COUNT * 100 / TOTAL_COUNT))" >> $GITHUB_ENV
          echo "review_pct=$((REVIEW_COUNT * 100 / TOTAL_COUNT))" >> $GITHUB_ENV

      - name: Determine Next Action
        id: decide_action
        run: |
          if [[ ${{ env.review_pct }} -lt 10 ]]; then
            NEXT_ACTION="review"
          elif [[ ${{ env.issue_pct }} -lt 10 ]]; then
            NEXT_ACTION="issue"
          elif [[ ${{ env.pr_pct }} -lt 10 ]]; then
            NEXT_ACTION="pr"
          else
            NEXT_ACTION="commit"
          fi
          echo "action=${NEXT_ACTION}" >> $GITHUB_ENV

      - name: Perform Action
        run: |
          case "${{ env.action }}" in
            commit)
              echo "Making changes to the file and committing..."
              echo "// Change made by script on $(date)" >> Change_autologs.txt
              git add .
              git commit -m "Update regarding specific functionality"
              git push origin main
              ;;
            pr)
              echo "Creating and resolving a PR..."
              git checkout -b "feature-auto-pr-$(date +%s)"
              echo "// Auto-generated changes for PR" >> auto_change.txt
              git add .
              git commit -m "Feature: auto-generated PR"
              git push origin HEAD
              gh pr create --title "Auto PR Feature" --body "This PR was automatically created."
              gh pr merge --squash --delete-branch --auto
              ;;
            issue)
              echo "Creating and closing an issue..."
              ISSUE_NUM=$(gh issue create --title "Auto Issue" --body "This is a scripted issue." | grep -o '[0-9]\+')
              gh issue close $ISSUE_NUM --comment "Issue automatically resolved."
              ;;
            review)
              echo "Simulating code review..."
              gh pr list --state open --limit 1 | grep -o '#[0-9]\+' | while read pr_id; do
                gh pr review $pr_id --approve --body "Reviewed: Looks good!"
              done
              ;;
          esac

      - name: Update Activity Tracking
        run: |
          echo "$(date): Updated by ${GITHUB_ACTOR}" >> update_log.txt
          git add update_log.txt
          git commit -m "Update activity log"
          git push origin main

      - name: Clean Up
        run: |
          git branch -D feature-auto-pr || true
          git stash clear
          git clean -f
